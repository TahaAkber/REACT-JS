{"ast":null,"code":"var _jsxFileName = \"/Users/kolnice/Documents/GitHub/REACT-JS/reactpractice/Mode 6 useEffect/src/components/Task.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Task() {\n  _s();\n  const [text, settext] = useState(\"\");\n  const handlechange = event => {\n    settext(event.target.value);\n  };\n  //if want trigger one when component mounted then use empty array or use state in an array\n  useEffect(() => {\n    console.log(\"Component Mounted\");\n    // we can use return when the component is unmounting\n    return () => {\n      console.log(\"Component Unmounted\");\n    };\n  }, [text]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: handlechange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 7\n  }, this);\n}\n_s(Task, \"UJpbaYlzQSOYyCZO+/2W31QHyZk=\");\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Task","_s","text","settext","handlechange","event","target","value","console","log","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kolnice/Documents/GitHub/REACT-JS/reactpractice/Mode 6 useEffect/src/components/Task.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\nfunction Task() {\n    const [text, settext] = useState(\"\");\n    const handlechange = (event) => {\n        settext(event.target.value);\n    }\n      //if want trigger one when component mounted then use empty array or use state in an array\n    useEffect(() => {\n    console.log(\"Component Mounted\");\n            // we can use return when the component is unmounting\n        return () => {\n      console.log(\"Component Unmounted\");\n    };\n\n    },[text])\n  return (\n      <div>\n          <input onChange={handlechange}></input>\n          <h3>{text}</h3>\n    </div>\n  )\n}\n\nexport default Task"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZ,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMO,YAAY,GAAIC,KAAK,IAAK;IAC5BF,OAAO,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EACC;EACFX,SAAS,CAAC,MAAM;IAChBY,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IACxB;IACJ,OAAO,MAAM;MACfD,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC;EAED,CAAC,EAAC,CAACP,IAAI,CAAC,CAAC;EACX,oBACIH,OAAA;IAAAW,QAAA,gBACIX,OAAA;MAAOY,QAAQ,EAAEP;IAAa;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvChB,OAAA;MAAAW,QAAA,EAAKR;IAAI;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEV;AAACd,EAAA,CApBQD,IAAI;AAAAgB,EAAA,GAAJhB,IAAI;AAsBb,eAAeA,IAAI;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}